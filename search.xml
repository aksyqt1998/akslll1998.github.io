<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>分支与循环</title>
      <link href="/2019/11/08/fen-zhi-yu-xun-huan/"/>
      <url>/2019/11/08/fen-zhi-yu-xun-huan/</url>
      
        <content type="html"><![CDATA[<h1 id="分支与循环"><a href="#分支与循环" class="headerlink" title="分支与循环"></a>分支与循环</h1><p>python代码默认情况下是从第一行开始从上往下一次执行的，每一条语句都会执行<br>分支结构：某段代码是否执行看条件（if语句）</p><h2 id="一-分支"><a href="#一-分支" class="headerlink" title="一.分支"></a>一.分支</h2><h3 id="1-if结构"><a href="#1-if结构" class="headerlink" title="1.if结构"></a>1.if结构</h3><pre class=" language-markdown"><code class="language-markdown">满足条件就执行某个操作，不满足就不执行</code></pre><pre class=" language-markdown"><code class="language-markdown">1)语法：if 条件语句：    <span class="token code keyword">    代码段</span>其他代码    2）说明if     -  关键字，固定写法条件语句    - 任何有结果的表示都可以，列如：数据，已经声明过的变量、运算表达式（不能是赋值语句等：      -   固定写法；(一般出现冒号的位置，后面都会产生缩进)代码段   -   和if保持一个缩进的一条或者多条语句；需要满足条件才执行的代码3) 执行过程先判断条件语句的结果是否为True(如果条件语句的结果不是布尔值，就先转换成布尔再看)如果为True就执行代码段，否则代码段不执行</code></pre><h3 id="2-if-else结构"><a href="#2-if-else结构" class="headerlink" title="2.if-else结构"></a>2.if-else结构</h3><p>满足条件执行某个操作，不满足条件的时候执行另外一个操作    </p><pre class=" language-markdown"><code class="language-markdown">1)语法：if 条件语句    <span class="token code keyword">    代码段 1(满足条件要执行的代码)</span>else：    <span class="token code keyword">    代码段 2（不满足条件要执行的代码）</span>2) 执行过程：先判断条件语句是否为True，如果为True就执行代码段1，否则就执行代码段2</code></pre><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">20</span><span class="token comment" spellcheck="true"># 根据年龄值的范围打印'成年'或者'未成年'</span><span class="token keyword">if</span> age <span class="token operator">&lt;=</span> <span class="token number">18</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'未成年'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'成年'</span><span class="token punctuation">)</span></code></pre><h3 id="3-if-elif-else结构"><a href="#3-if-elif-else结构" class="headerlink" title="3.if-elif-else结构"></a>3.if-elif-else结构</h3><p>#####1)语法</p><pre class=" language-markdown"><code class="language-markdown">if 条件语句1:    <span class="token code keyword">    代码段1</span>elif 条件语句2:    <span class="token code keyword">    代码段2</span>elif 条件语句3:    <span class="token code keyword">    代码段3</span>....else:    <span class="token code keyword">    代码段N</span>其它语句</code></pre><p>#####2) 执行过程：</p><p>先判断条件语句1是否为True，为True就执行代码段1，然后整个if-elif-else结构结束</p><p>如果为False,就判断条件语句2是否为True，为True就执行代码段2，然后整个if-elif-else结构结束</p><p>如果为False,就判断条件语句3是否为True，为True就执行代码段3，然后整个if-elif-else结构结束</p><p>以此类推</p><p>如果所有的条件语句都不成立，执行else后面的代码段</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 根据年龄范围打印:少年(14以下)、青年(14-25)、壮年(26-35)、中年(36-50)、老年</span>age <span class="token operator">=</span> <span class="token number">25</span><span class="token keyword">if</span> age <span class="token operator">&lt;</span> <span class="token number">14</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'少年'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">14</span> <span class="token operator">&lt;=</span> age <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'青年'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">26</span> <span class="token operator">&lt;=</span> age <span class="token operator">&lt;=</span> <span class="token number">35</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'壮年'</span><span class="token punctuation">)</span><span class="token keyword">elif</span> <span class="token number">36</span> <span class="token operator">&lt;=</span> age <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'中年'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'老年'</span><span class="token punctuation">)</span></code></pre><h3 id="4-if嵌套"><a href="#4-if嵌套" class="headerlink" title="4.if嵌套"></a>4.if嵌套</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""if结构中的代码块中可以再出现其他的if语句"""</span><span class="token comment" spellcheck="true"># 判断一个数是否是偶数，并且判断这个数是否是4的倍数；并打印出结论</span><span class="token comment" spellcheck="true"># 方法：</span>num <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">if</span> num <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'偶数'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是4的倍数'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'奇数'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> num <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'个位数是3'</span><span class="token punctuation">)</span></code></pre><h2 id="二-循环"><a href="#二-循环" class="headerlink" title="二.循环"></a>二.循环</h2><p>循环结构：for循环和while循环</p><h3 id="1-for循环"><a href="#1-for循环" class="headerlink" title="1.for循环"></a>1.for循环</h3><pre class=" language-markdown"><code class="language-markdown">1)语法：for 变量名 in 序列：    <span class="token code keyword">    循环体</span>2)说明：for     -   关键字固定写法变量名  -   和声明变量的变量名要求一致in      -   关键字，固定写法序列    -    容器型数据：字符串、列表、字典、元组、集合、迭代器、生成器、range：      -    固定写法循环体  -     和for保持一个缩进的一条或多条语句；需要重复执行的语句3）执行过程：让变量去序列中取值，一个一个的取，取完为止；每取一个值，执行一次循环体(for循环可以通过控制序列中元素的个数来控制循环的次数)</code></pre><h3 id="2-range函数"><a href="#2-range函数" class="headerlink" title="2.range函数"></a>2.range函数</h3><pre class=" language-python"><code class="language-python"><span class="token number">1</span><span class="token punctuation">)</span> range<span class="token punctuation">(</span>N<span class="token punctuation">)</span>    <span class="token operator">-</span>   产生<span class="token number">0</span> <span class="token operator">~</span> N<span class="token number">-1</span>的数字序列例如：range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token number">2</span><span class="token punctuation">)</span> range<span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">)</span>  <span class="token operator">-</span>   产生M <span class="token operator">~</span> N<span class="token number">-1</span>的数字序列例如：range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token number">3</span><span class="token punctuation">)</span> range<span class="token punctuation">(</span>M<span class="token punctuation">,</span>N<span class="token punctuation">,</span>stop<span class="token punctuation">)</span>  <span class="token operator">-</span>  从M开始每隔step产生下一个数字，到N前一个数为止   例如：range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span>作用<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">.</span>产生指定的数字序列 <span class="token number">2</span><span class="token punctuation">.</span>控制循环次数</code></pre><p>注意：如果for循环中变量取出来的值在循环体中无用，这个变量可以直接用_来命名</p><pre class=" language-python"><code class="language-python"><span class="token keyword">for</span> _ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'+'</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 练习1：打印0~100中所以能被3整除的数 </span>方法一： <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                 <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span> 方法二： <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x='</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 练习2：统计1~100中能被4整除并且个位数是2的数字的个数</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> x <span class="token operator">%</span> <span class="token number">10</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>                num <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'被4整除并且个位数是2的数字的个数:'</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 练习3：计算1+2+3+...+100</span>y <span class="token operator">=</span> <span class="token number">0</span>   <span class="token comment" spellcheck="true"># 保存最后的和</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        y <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span></code></pre><h3 id="3-while循环"><a href="#3-while循环" class="headerlink" title="3.while循环"></a>3.while循环</h3><pre class=" language-markdown"><code class="language-markdown">1)语法：while 条件语句:    <span class="token code keyword">    循环体</span>2)说明:while   -   关键字:固定写法条件语句 -  任何有结果的表达式；数据、已经声明过的变量、运算符表达式(不能是赋值语句)等:       -   固定写法循环体   -   和while保持一个缩进的一条或者多条语句；(需要重复指定的语句)3)执行过程:先判断条件语句是否为True，如果为True就执行循环体;执行完循环体再判断条件语句是否为True,为True又执行循环体,以此类推,直到条件语句的结果是False循环就结束</code></pre><h3 id="4-for循环和while循环的选择问题"><a href="#4-for循环和while循环的选择问题" class="headerlink" title="4.for循环和while循环的选择问题"></a>4.for循环和while循环的选择问题</h3><pre class=" language-markdown"><code class="language-markdown">1)什么时候使用for循环a.循环次数确定的时候b.遍历序列2)什么时候使用while循环a.死循环b.循环次数不确定</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 练习：猜数字游戏</span><span class="token comment" spellcheck="true"># 游戏开始的时候随机产生一个100以内的数字，不断输入数字，直到输入的数字和产生的数字一致，游戏就结束</span><span class="token comment" spellcheck="true"># 在没有猜对的时候，给出'大了'或者'小了'的提示</span>number <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 产生0~100的随机数，并且保存在number</span>value <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> value <span class="token operator">!=</span> number<span class="token punctuation">:</span>        <span class="token keyword">if</span> value <span class="token operator">&lt;</span> number<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小了'</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> value <span class="token operator">></span> number<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大了'</span><span class="token punctuation">)</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'正确'</span><span class="token punctuation">)</span></code></pre><p>##三.循环关键字</p><h3 id="1-continue"><a href="#1-continue" class="headerlink" title="1.continue"></a>1.continue</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""continue是循环体中的关键字当执行循环体的时候，如果遇到continue，那么当次循环结束，直接进入下次循环的判断"""</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===='</span><span class="token punctuation">)</span>    <span class="token keyword">continue</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'++++'</span><span class="token punctuation">)</span></code></pre><h3 id="2-break"><a href="#2-break" class="headerlink" title="2.break"></a>2.break</h3><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""break是循环体重的关键字当执行循环体的时候如果遇到break，那么整个循环直接结束"""</span><span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'===='</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>         <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'++++'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 功能：不断输入数字直到输入的数字是0为止，然后再求输入的所有的奇数的和</span>sum1 <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        value <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入数字：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> value <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> value <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>        sum1 <span class="token operator">+=</span> value<span class="token keyword">print</span><span class="token punctuation">(</span>sum1<span class="token punctuation">)</span></code></pre><p>###3.else</p><pre class=" language-markdown"><code class="language-markdown">"""1)完整的for循环for 变量 in 序列    <span class="token code keyword">    循环体</span>else:    <span class="token code keyword">    代码段    </span>2）完整的while循环while 条件语句：    <span class="token code keyword">    循环体</span>else:    <span class="token code keyword">    代码段    </span>else中的代码段：当循环自然死亡(for后的变量数据取完了；while后面的条件为False),else后面的代码段会在循环结束后执行；如果循环是因为遇到break而结束的,那么else后面代码段就不会执行    else的意义:可以通过判断else中的代码有没有执行来判断循环有没有遇到break"""</code></pre><h3 id="4-while循环的用法"><a href="#4-while循环的用法" class="headerlink" title="4,while循环的用法"></a>4,while循环的用法</h3><pre class=" language-markdown"><code class="language-markdown">while True:    <span class="token code keyword">    需要重复执行的代码段    </span><span class="token code keyword">    if 退出循环的条件：        </span><span class="token code keyword">        break</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>字符串</title>
      <link href="/2019/11/08/zi-fu-chuan/"/>
      <url>/2019/11/08/zi-fu-chuan/</url>
      
        <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h3 id="字符串与字符"><a href="#字符串与字符" class="headerlink" title="字符串与字符"></a>字符串与字符</h3><p>#####1.什么是字符串(str)</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""字符串是容器型数据类型将''/""/''''''/"""</span><span class="token triple-quoted-string string">"""作为容器标志，容器中的元素全是字符不可变的(不支持增删改)、有序的（支持下标操作）"""</span><span class="token comment" spellcheck="true"># str1 = "hello"</span><span class="token comment" spellcheck="true"># str2 = '你好'</span><span class="token comment" spellcheck="true"># str3 = </span><span class="token triple-quoted-string string">'''Thanks'''</span><span class="token comment" spellcheck="true"># str4 = </span><span class="token triple-quoted-string string">"""谢谢"""</span></code></pre><h5 id="2-字符串中的元素-字符"><a href="#2-字符串中的元素-字符" class="headerlink" title="2.字符串中的元素 -   字符"></a>2.字符串中的元素 -   字符</h5><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""python中只有字符的概念，没有对应的数据类型。引号中只有一个元素的字符串可以看成一个字符字符串又叫字符集1)字符串中的字符   -   原则上任何可以通过键盘输入或者其他地方复制粘贴的所有的符号都可以作为字符a.普通字符:在字符串中能够代表符号本身的字符(没有特殊意义和特殊功能的符号)b.转义字符:在字符串中有特殊意义和特殊功能的符号的组合,一般是以\开头的\n  -   换行\'  -   表示'本身\"  -   表示"本身\t  -   表示一个缩进(tab键)\\  -   表示一个\注意:所有的转义字符的长度都是1c.编码字符2) 阻止转义:在字符串的最前面加r/R可以让当前字符串中所有的转义字符失效(所有的符号在当前的字符串中都表示这个符号本身)"""</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># \u四位的16进制数   -   编码字符(获取4位16进制数作为编码值对应的字符)</span></code></pre><h5 id="3-字符编码"><a href="#3-字符编码" class="headerlink" title="3.字符编码"></a>3.字符编码</h5><p>计算机不能直接存储字符(符号),只能存储数字;为了能够存储字符，把每一个字符关联了一个固定的数字(这个固定的数字就是对应的字符的编码)</p><p>字符和数字的一一对应关系就是编码表:ASCII编码表,Unicode编码表(python)</p><pre class=" language-markdown"><code class="language-markdown">1）ASCII编码表    -   在计算机中采用一个字节保存一个字符(总共128个字符),字符包含了所有的字母、数字和美国常用符号0 ~ 9: 编码值从48开始依次增加大写字母的编码值 &lt; 小写字母的编码值大写字母和小写字母不是紧挨着的2）Unicode编码表是ASCII编码表的扩展,包含了世界上所有的国家、所有的语言对应的符号(总共有65536个符号)eASCII的编码范围:0~127中文编码范围e:0x4e00~0x9fa5</code></pre><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.编码字符: /u4位16进制编码值</span>str1 <span class="token operator">=</span> <span class="token string">'abc\u5fa5'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.chr(编码值)    -   获取编码值对应的字符</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0x4e00</span><span class="token punctuation">,</span> <span class="token number">0x9fa5</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.ord(字符) -   获取指定字符对应的编码值</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'晏'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'启'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span><span class="token string">'桐'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\u664f'</span><span class="token punctuation">,</span> <span class="token string">'\u542f'</span><span class="token punctuation">,</span> <span class="token string">'\u6850'</span><span class="token punctuation">)</span></code></pre><h3 id="2-字符串操作"><a href="#2-字符串操作" class="headerlink" title="2.字符串操作"></a>2.字符串操作</h3><p>#####1.查   -   获取字符(和列表获取元素的方式一样)</p><pre><code>"""1)获取单个字符:字符串[下标]2)切片:字符串[开始下标:结束下标:步长]3)遍历:直接遍历元素、通过下标遍历"""</code></pre><p>注意:一个空格是一个字符;按tab键是4个空格，对应4个字符；\t对应一个字符</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 注意:一个空格是一个字符;按tab键是4个空格，对应4个字符；\t对应一个字符</span> str1 <span class="token operator">=</span> <span class="token string">'\thello Python!'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># n</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># e</span><span class="token comment" spellcheck="true"># 切片</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 遍历</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> str1<span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'x:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""for 下标,元素 in enumerate(序列):        循环体"""</span> <span class="token keyword">for</span> x<span class="token punctuation">,</span> y <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span></code></pre><h5 id="2-相关操作"><a href="#2-相关操作" class="headerlink" title="2.相关操作"></a>2.相关操作</h5><h6 id="1）运算符"><a href="#1）运算符" class="headerlink" title="1）运算符"></a>1）运算符</h6><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># a. +, *</span> str1 <span class="token operator">=</span> <span class="token string">'abc'</span> str2 <span class="token operator">=</span> <span class="token string">'123'</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>str2<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token operator">*</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># b. ==, !=, is</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span> <span class="token operator">==</span> <span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span> <span class="token operator">==</span> <span class="token string">'acb'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># >, &lt;, >=, &lt;=</span><span class="token comment" spellcheck="true"># 字符串1 > 字符串2</span><span class="token comment" spellcheck="true"># 字符串比较大小比较的是字符串编码值的大小</span><span class="token triple-quoted-string string">"""判断字符是否是小写字母:'a' &lt;= char &lt;= 'z'判断字符是否是大写字母:'A' &lt;= char &lt;= 'Z'判断是否是字母:'A' &lt;= char &lt;= 'Z' or 'a' &lt;= char &lt;= 'z'判断是否是数字:'0' &lt;= char &lt;= '9'"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abcdef'</span> <span class="token operator">></span> <span class="token string">'bc'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Z'</span> <span class="token operator">&lt;</span> <span class="token string">'a'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># True# </span></code></pre><pre class=" language-python"><code class="language-python">练习<span class="token punctuation">:</span>输入一个字符串，判断这个字符串是否是中文字符串（全是中文）value <span class="token operator">=</span> <span class="token string">'你好'</span><span class="token keyword">for</span> x <span class="token keyword">in</span> value<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> <span class="token string">'\u4e00'</span> <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> <span class="token string">'\u9fa5'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不是中文字符串'</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是中文字符串'</span><span class="token punctuation">)</span></code></pre><p>######2) in / not in</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 字符串1 in 字符串2 -> 判断字符串2中是否包含字符串1</span>str3 <span class="token operator">=</span> <span class="token string">'abc 123'</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ac'</span> <span class="token keyword">in</span> str3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># False</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'ab'</span> <span class="token keyword">in</span> str3<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#True</span></code></pre><p>######3)相关函数:len, str, sorted, reversed</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># a.len(字符串)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">'\tabc\n123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 8</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">' 123'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true"># 4</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 1</span><span class="token comment" spellcheck="true"># b.str(数据) -   所以数据都可以转换成字符串；直接将数据的打印值加引号</span>a <span class="token operator">=</span> <span class="token number">100</span>str<span class="token punctuation">(</span>a<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># '100'</span>str<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># True</span>list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">]</span>str4 <span class="token operator">=</span> str<span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">,</span>str4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># c.sorted(字符串)</span>str5 <span class="token operator">=</span> <span class="token string">'python'</span><span class="token keyword">print</span><span class="token punctuation">(</span>sorted<span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># d.reversed</span></code></pre><h3 id="3格式字符串"><a href="#3格式字符串" class="headerlink" title="3格式字符串"></a>3格式字符串</h3><p>#####1.格式占位符</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""a.语法:包含格式占位符的字符串 % (值1, 值2, 值3,...)b.说明:格式占位符   -   格式占位符有哪些是固定的，使用的时候和字符串中变化的数据的类型相关  %s     -   字符串(任何类型都可以使用%占位)                %d     -   整数                %-Nd   -   整数；N约束数字最后的长度，如果不够后面补空格                %Nd    -   整数；N约束数字最后的长度，如果不够前面补空格                %f     -   浮点数                %.Nf   -   浮点数；N是约束小数点后面的小数位数(会四舍五入)                %c     -   字符%   -   固定写法()  -   固定写法;如果值的个数是1可以省略值  -   任何有结果的表达式;值的个数和类型和前面占位符的个数以及类型保持一致"""</span> name <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入姓名:'</span><span class="token punctuation">)</span> age <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入年龄:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 你好，我是xxx，今年x岁</span> <span class="token comment" spellcheck="true"># 方法一：</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好,我是'</span><span class="token operator">+</span>name<span class="token operator">+</span><span class="token string">',今年'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'岁'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'你好,我是%s,今年%d岁'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>#####2.format</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""一个带有{}的字符串.format(值1, 值2, 值3,...)"""</span></code></pre><p>用法1:让空的{}个数和format中的值的个数保持一致</p><p><code>print('我是{},今年{}'.format('w',1))</code></p><p>用法2:{N} - N从0开始依次增加,分别表示format中第0个值,第1个值,…</p><p><code>print('我是{0},年龄是{1},{1}'.format('yu',1))</code></p><p>用法3:[key]# ‘{key1},{key2}’.format(key1=值1,key2=值2)   -&gt;  ‘值1，值2’</p><p><code>print('我是{name},年龄是{age}'.format(name='wang', age='12'))</code></p><p>用法4:用列表元素给占位符赋值</p><p><code>list1 = [10, 20, 30, 40]</code></p><p><code>print('{0[2]},{0[1]},{0[2]},{0[3]}'.format(list1))</code></p><p>用法5:用字典的值给占位符赋值(了解)</p><p><code>student = {'name': '小明', 'age': '19', 'id': '001'}</code></p><p><code>print('{name}今年{age}岁，学号{id}'.format(**student))</code></p><p><code>format(**student) --&gt; format(name='小明',age=20,id='001')</code></p><p>其他写法:</p><p>约束小数位数</p><p><code>print('圆周率:{:.2f}'.format(3.1415926535))   # 约束小数位数</code></p><p>约束整数宽度</p><p><code>print('整数:{:0&gt;3d}。'.format(25))</code>   </p><p><code>print('整数:{:0&lt;3d}'.format(25))</code> </p><p>分割</p><p><code>print('大的整数:{:,}'.format(10000000000))</code></p><p> 百分百</p><p><code>print('百分百:{:.2%}'.format(0.25696))</code></p><h3 id="4-字符串相关方法"><a href="#4-字符串相关方法" class="headerlink" title="4.字符串相关方法"></a>4.字符串相关方法</h3><p>#####1.字符串.capitalize() - 将字符串的首字母变成大写字母<br>#####2.center/ljust/rjust/zfill</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""字符串.center(宽度，填充字符)     #xabcx字符串.ljust(宽度，填充字符)      #abcxx字符串.rjust(宽度，填充字符)      #xxabc字符串.zfill(宽度) == 字符串.rjust(宽度, '0')"""</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">.</span>center<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token string">'+'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>#####3.<br>字符串1.count(字符串2)    &gt;   统计字符串1中字符串2出现的次数<br>字符串1.count(字符串2，开始下标，结束下标)    -   统计字符串1开始下标到结束下标范围内字符串2出现的次数</p><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">'how are you? i am finr! thank you!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>#####4.</p><pre class=" language-python"><code class="language-python">str1 <span class="token operator">=</span> <span class="token string">'abc'</span>str2 <span class="token operator">=</span> <span class="token string">'how are you'</span><span class="token comment" spellcheck="true"># 判断str2是否以str1结尾</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">[</span><span class="token operator">-</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">)</span></code></pre><h5 id="5-字符串查找"><a href="#5-字符串查找" class="headerlink" title="5.字符串查找"></a>5.字符串查找</h5><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""字符串1.find(字符串2) -   获取字符串2第一次在字符串1出现的位置(用大于等于0的下标值表示)                     字符串2不存在结果是-1字符串1.index(字符串2) -  获取字符串2第一次在字符串1出现的位置(用大于等于0的下标值表示)                    字符串2不存在会报错"""</span>str2 <span class="token operator">=</span> <span class="token string">'how'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">'o'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>#####6.join</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""字符串.join(序列)    -   将序列中的元素用字符串连接在一起产生一个新的字符串                         序列中的元素是字符串"""</span>str3 <span class="token operator">=</span> <span class="token string">'+'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span>str4 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'gender'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span></code></pre><p>#####7.字符串替换</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""1)字符串1.replace(字符串2,字符串3) ->  将字符串1中所有的字符串2都替换成字符串32)字符串1.maketrans(字符串2, 字符串3)  ->  创建字符串2和字符串3一一对应的映射表字符串1.translate(替换的映射表)"""</span></code></pre><pre class=" language-python"><code class="language-python">str2 <span class="token operator">=</span> <span class="token string">'how are you?'</span>new_str2 <span class="token operator">=</span> str2<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'you'</span><span class="token punctuation">,</span> <span class="token string">'me'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_str2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建映射表</span>table <span class="token operator">=</span> str<span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">)</span>new_str2 <span class="token operator">=</span> str2<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>table<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 将字符串str2中所有的a替换成b</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_str2<span class="token punctuation">)</span></code></pre><p>#####8.字符串切割</p><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""字符串1.split(字符串2)    -   将字符串1中所有的字符串2作为切割点切成多份"""</span>str2 <span class="token operator">=</span> <span class="token string">'how are you? i am fine! thank you!'</span><span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表元组和数字</title>
      <link href="/2019/11/07/lie-biao-yuan-zu-he-shu-zi/"/>
      <url>/2019/11/07/lie-biao-yuan-zu-he-shu-zi/</url>
      
        <content type="html"><![CDATA[<h1 id="列表元组和数字"><a href="#列表元组和数字" class="headerlink" title="列表元组和数字"></a>列表元组和数字</h1><h3 id="1-列表相关操作"><a href="#1-列表相关操作" class="headerlink" title="1.列表相关操作"></a>1.列表相关操作</h3><h5 id="1-运算符"><a href="#1-运算符" class="headerlink" title="1.运算符"></a>1.运算符</h5><p>1)数学运算符: + , *</p><p>列表1 + 列表2 -&gt; 产生一个新的列表，新列表中的元素是两个列表中元素的合并</p><p><code>list1 = [1, 2, 3]</code></p><p><code>list2 = ['张三', '李四']</code></p><p><code>print(list1 + list2)</code></p><p>列表 * N / N * 列表   -&gt;  列表中的元素重复N次，产生一个新的列表</p><p><code>print(list1 * 3)</code></p><p>2)比较运算符：# ==，！=，&gt;=，&lt;=(了解)</p><p>列表1 == 列表2    -&gt;  判断两个列表的值是否相等</p><p><code>list3 = [1, 2, 3]</code></p><p><code>list4 = [2, 1, 3]</code> </p><p>is</p><p> 变量1 is 变量2    -&gt;  判断地址是否相等</p><p><code>li1 = [1, 2]</code></p><p><code>li2 = [1, 2]</code></p><p><code>print(li1 == li2)</code></p><p><code>print(li1 is li2)   # print(id(li1) == id(il2))</code></p><h5 id="2-in和not-in"><a href="#2-in和not-in" class="headerlink" title="2. in和not in"></a>2. in和not in</h5><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""元素 in 列表       ->  判断列表中是否存在指定元素元素 not in 列表        ->  判断列表中是否存在指定元素"""</span></code></pre><h5 id="3-相关函数"><a href="#3-相关函数" class="headerlink" title="3.相关函数"></a>3.相关函数</h5><p>len()、max、min、list、sum</p><p>1) len(序列) -   获取序列长度（元素的个数）</p><p>2) max/min</p><p>max(序列)/min(序列)   -&gt;  获取序列中元素的最大值/最小值</p><p>序列的要求：a.序列中所有的元素的类型一致（数字看成一种类型）   </p><p>​                        b.元素本身支持比较大小</p><pre class=" language-python"><code class="language-python">score <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>max<span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>min<span class="token punctuation">(</span>score<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>3) sum</p><p>sum(数字序列) -&gt;  求序列中所有元素的和</p><pre class=" language-python"><code class="language-python">scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>4) list</p><p>list(数据)  -&gt;  将指定的数据转换成列表；数据必须是序列(所有的序列都可以转换成列表)</p><p><code>print(list(100))</code></p><p><code>print(list('hello'))</code></p><p><code>print(list(range(10, 15)))</code></p><h3 id="2-列表相关的方法"><a href="#2-列表相关的方法" class="headerlink" title="2.列表相关的方法"></a>2.列表相关的方法</h3><p>#####1.列表.count（元素）    -&gt;  统计列表中指定元素的个数</p><pre class=" language-python"><code class="language-python">names <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'曹操'</span><span class="token punctuation">,</span> <span class="token string">'刘备'</span><span class="token punctuation">,</span> <span class="token string">'司马懿'</span><span class="token punctuation">,</span> <span class="token string">'吕布'</span><span class="token punctuation">,</span> <span class="token string">'曹操'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token string">'曹操'</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="2-列表-extend-序列-将序列中的元素全部添加的列表中"><a href="#2-列表-extend-序列-将序列中的元素全部添加的列表中" class="headerlink" title="2.列表.extend(序列)   -   将序列中的元素全部添加的列表中"></a>2.列表.extend(序列)   -   将序列中的元素全部添加的列表中</h5><pre class=" language-python"><code class="language-python">names<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'后羿'</span><span class="token punctuation">)</span>names<span class="token punctuation">.</span>extend<span class="token punctuation">(</span><span class="token string">'后羿'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>names<span class="token punctuation">)</span></code></pre><p>#####3.列表.index(元素)    -&gt;  获取指定元素在列表中的下标</p><pre class=" language-python"><code class="language-python"> a<span class="token punctuation">.</span>如果元素不存在会报错 b<span class="token punctuation">.</span>如果元素有不多个</code></pre><p>#####4.列表.reverse()    -   将原来的序列倒序过来（反过来）</p><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>nums<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>new_nums <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre><h5 id="5-列表-clear-gt-清空列表"><a href="#5-列表-clear-gt-清空列表" class="headerlink" title="5.列表.clear()  ->  清空列表"></a>5.列表.clear()  -&gt;  清空列表</h5><pre class=" language-python"><code class="language-python">nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span>nums<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 注意:清空列表用clear，而不是直接复制</span></code></pre><p>#####6.复制.copy() -   复制列表中的一个元素，产生一个新的列表</p><pre class=" language-python"><code class="language-python">和列表<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>的功能一模一样，都属于浅拷贝将新列表的地址返回！两个相互不影响</code></pre><p>#####7.列表.sot()    -&gt;  将列表中的元素从小到大依次排序(直接修改列表元素的顺序,不会产生新的列表)</p><pre class=" language-python"><code class="language-python">列表<span class="token punctuation">.</span>sot<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token operator">==</span> 列表<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>列表<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span> 从大到小scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">88</span><span class="token punctuation">,</span><span class="token number">78</span><span class="token punctuation">,</span><span class="token number">79</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">93</span><span class="token punctuation">]</span>scores<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span>scores<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span></code></pre><p>#####8.排序函数:sorted(序列) -&gt;  不会修改序列，排序后产生一个新的列表</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># sorted(序列，reverse=True) -> 不修改原序列，排列后产生一个新的列表(从大到小，降序)</span>new_scores <span class="token operator">=</span> sorted<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_scores<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token string">'hello'</span>new_str1 <span class="token operator">=</span> sorted<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_str1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># reversed(序列）  ->  将序列中的元素倒序，产生一个新的序列对应的迭代器(了解)</span>new_str2 <span class="token operator">=</span> reversed<span class="token punctuation">(</span><span class="token string">'abc'</span><span class="token punctuation">)</span>str2 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> x <span class="token keyword">in</span> new_str2<span class="token punctuation">:</span>        str2 <span class="token operator">+=</span> x<span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span></code></pre><h3 id="3-元组"><a href="#3-元组" class="headerlink" title="3.元组"></a>3.元组</h3><h5 id="1-什么是元组-tuple"><a href="#1-什么是元组-tuple" class="headerlink" title="1.什么是元组(tuple)"></a>1.什么是元组(tuple)</h5><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""元组就是不可变的列表元组是容器型数据类型，将括号作为容器的标志，里面多个元素用逗号隔开:(元素1，元素2，元素3，....)元组不可变（不支持增删改操作），有序(支持下标操作)元素可以是任何类型的数据"""</span></code></pre><p><code>tuple1 = (1, 2, 3)</code><br><code>print(type(tuple1))</code></p><p>#####2.和列表一样的操作 </p><p>1)获取元素 </p><p>列表获取元素的操作元组都支持</p><p>tuple2 = (10, 30, 21, 70)</p><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><p>2）相关运算: +, *, ==, !=, is, len, max, min, sun ,sorted</p><p><code>print((1, 2, 3) + ( 'abd', 'hello') )</code></p><p>tuple(数据) -   将数据转换成元组(数据必须是元组)</p><p><code>print(tuple('hello'))</code></p><p>#####3.元组特有的或者使用频率偏高的操作 </p><p>1）单个元素的元组：(元素,)</p><p>tuple3 = (10,)</p><p>2)单独使用的元组的值，()可以省略    -&gt;  直接多个数据用逗号隔开表示的还是一个元组</p><p>tuple4 = 10, 20, 30</p><p>3)可以通过让变量的个数和元组中元素的个数来保持一直来分别获取元组中的值</p><p>变量1， 变量2， 变量3，…. = 元组</p><pre class=" language-python"><code class="language-python"><span class="token number">4</span>）同时声明多个变量获取元组中的元素<span class="token punctuation">,</span>变量的个数可以比元组中元素的个数少<span class="token punctuation">,</span>但是这个时候<span class="token punctuation">,</span>多个变量汇中的某一个变量的前面必须加<span class="token operator">*</span>；带的变量可以获取不带<span class="token operator">*</span>的变量获取剩下的部分tuple5 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">299</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">)</span></code></pre><h3 id="4-数字"><a href="#4-数字" class="headerlink" title="4.数字"></a>4.数字</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> math    <span class="token comment" spellcheck="true"># 数学模块  -   提供数学相关方法和数据</span><span class="token keyword">import</span> cmath   <span class="token comment" spellcheck="true"># 提供复数相关数据和方法</span></code></pre><p>python中和数字相关的类型：整型(int)、浮点型(float)、布尔(bool)、复数(complex)</p><h5 id="1-整型-int"><a href="#1-整型-int" class="headerlink" title="1.整型(int)"></a>1.整型(int)</h5><p>所有整数对应的类型(python2.x整型处理int还有long);支持2进制、8进制和16进制的表示方式</p><p>int(数据)   -   将制定的数据转换成整数；                </p><p>​                1）所有的浮点数和布尔都可以转换成整型#                </p><p>​                2）字符串，字符串去掉引号后本身是整数</p><h5 id="2-浮点型-float"><a href="#2-浮点型-float" class="headerlink" title="2.浮点型(float)"></a>2.浮点型(float)</h5><p>所有带小数点的数对应的类型;支持科学计数法: 3e4 == 3<em>10*</em>4</p><p>float(数据) -   将指定的数据转换成浮点数                 </p><p>​                    1）所有的整数和布尔都可以转化成浮点                 </p><p>​                    2）字符串，字符串去掉引号本身就是个数 </p><h5 id="3-布尔-bool"><a href="#3-布尔-bool" class="headerlink" title="3.布尔(bool)"></a>3.布尔(bool)</h5><p>只有True和False；True1本质就是1，False本质就是0 </p><p>bool(数据)  -   将指定数据转换成布尔值；</p><p>不管什么类型的数据都能转换成布尔，所有为零为空的会转成False，其他会转成True</p><h5 id="4-复数-complex"><a href="#4-复数-complex" class="headerlink" title="4.复数(complex)"></a>4.复数(complex)</h5><p>由实部和虚部组成的数就是复数，实部+虚部j；python直接支持复数的运算</p><p>注意：如果虚部是1，这个1不能省</p><pre class=" language-python"><code class="language-python">c1 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">2j</span>c2 <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">-</span> <span class="token number">3j</span><span class="token keyword">print</span><span class="token punctuation">(</span>c1 <span class="token operator">*</span> c2<span class="token punctuation">)</span></code></pre><h5 id="5-数学模块"><a href="#5-数学模块" class="headerlink" title="5.数学模块"></a>5.数学模块</h5><pre class=" language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>floor<span class="token punctuation">(</span><span class="token number">5.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>abs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>math<span class="token punctuation">.</span>fabs<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">20.2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>列表基础语法</title>
      <link href="/2019/11/06/lie-biao-ji-chu-yu-fa/"/>
      <url>/2019/11/06/lie-biao-ji-chu-yu-fa/</url>
      
        <content type="html"><![CDATA[<p>#列表基础语法</p><h3 id="1-什么是列表-list"><a href="#1-什么是列表-list" class="headerlink" title="1.什么是列表(list)"></a>1.什么是列表(list)</h3><p>#####1）列表</p><p>列表是python提供的一种容器型数据类型;以[]作为容器的标志，里面多个元素用逗号隔开:[元素1，元素2，元素3，…]</p><p>列表是可变的(元素个数、元素的值可变) - 元素支持增、删改操作</p><p>列表是有序的 - 支持下标操作</p><h5 id="2）列表元素"><a href="#2）列表元素" class="headerlink" title="2）列表元素"></a>2）列表元素</h5><p>列表中的元素可以是任何类型的数据;同一个列表中的元素的类型可以不一样</p><p><code>[12, 12.8, True, "abc", [1, 2], (10, 10), {1, 2}, {"name": 100}]</code></p><h3 id="2-查-获取列表的元素"><a href="#2-查-获取列表的元素" class="headerlink" title="2.查    -    获取列表的元素"></a>2.查    -    获取列表的元素</h3><h5 id="1-获取单个元素"><a href="#1-获取单个元素" class="headerlink" title="1)获取单个元素"></a>1)获取单个元素</h5><pre class=" language-markdown"><code class="language-markdown">a.语法：列表[下标]   --     获取列表中指定下标对应的元素b.说明列表   -   列表值，保存列表的变量，结果是列表的表达式[]    -   固定写法下标  -  列表中的每个元素都会对应一个下标，来表示这个元素在列表中的位置。           下标范围：0 ~ 列表长度-1    -  从前往后以此增加(0表示第一个元素)                               -1 ~ -列表长度    -  从后往前依次递减(-1表示最后一个元素)注意:下标不能越界</code></pre><h5 id="2）获取部分元素-切片"><a href="#2）获取部分元素-切片" class="headerlink" title="2）获取部分元素(切片)"></a>2）获取部分元素(切片)</h5><p>a.语法列表[开始下标：结束下标：步长]    -   从开始下标开始获取，下标值每次增长步长去获取下一个元素，到结束下标位置</p><p>列表[M：N：step]         获取range(M， N， step)产生的数字序列作为下标对应的所有的元素</p><p>注意：列表切片的结果还是列表，新列表中的元素是原列表元素的一部分</p><p>b.说明:</p><p>步长为正，是从前往后取，那么开始下标所在的位置必须在结束下标的前面，否则取不到元素([])</p><p>步长为负，是从后往前取，那么开始下标的在所在的位置后面，否则取不到值</p><pre class=" language-markdown"><code class="language-markdown">2)切片    -   省略下标和步长a.省略步长: 列表[开始下标:结束下标]    -   相当于步长为1b.省略开始下标: 列表[:结束下标:步长] / 列表[:结束下标]     如果步长为正从第一个元素开始往后取；                                                 如果步长为负从最后一个往前取                                                        c.省略结束下标: 列表[开始下标::步长] / 列表[开始下标:]  -   从该方向取到最后一个元素为止d.省略开始下标和结束下标: 列表[::步长] / 列表[:]</code></pre><p>#####3)遍历列表    -   将列表中的元素一个一个取出来</p><p>a.直接遍历获取元素</p><p>for 变量 in 列表：    </p><p>​    循环体    </p><p>b.通过遍历下标来遍历</p><p>length = len(列表)</p><p>for 变量 in range(length)    </p><p>​    元素 = 列表[变量]</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1)直接遍历</span>movies <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'暮光之城'</span><span class="token punctuation">,</span> <span class="token string">'哪吒之魔童降世'</span><span class="token punctuation">,</span> <span class="token string">'摔跤吧爸爸'</span><span class="token punctuation">,</span> <span class="token string">'肖申克的救赎'</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> movies<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2）通过下标遍历</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>movies<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ========顺序取============</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># ========倒序取============</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span>length<span class="token number">-1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>movies<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token triple-quoted-string string">"""IndexError: list index out of range============下标越界！============="""</span><span class="token comment" spellcheck="true"># 切片的时候下标可以越界</span></code></pre><h3 id="3-列表的增、删、改"><a href="#3-列表的增、删、改" class="headerlink" title="3.列表的增、删、改"></a>3.列表的增、删、改</h3><p>#####1）增    -    添加元素</p><p>1)列表.append(元素) -   在指定的列表的末尾添加一个元素</p><p>2)列表.insert(下标,元素)  -   在列表指定的下标前插入指定的元素</p><h5 id="2）删-删除列表中的元素"><a href="#2）删-删除列表中的元素" class="headerlink" title="2）删    -    删除列表中的元素"></a>2）删    -    删除列表中的元素</h5><p>1）del 列表[下标]  -   删除指定下标对应的元素(下标不能越界)</p><p>del films[2]</p><p>print(films)</p><p>2) 列表.remove(元素)  -   删除列表中的指定元素</p><p>注意：a.如果元素不存在会报错！ b.如果元素在列表中有多个，只删第一个</p><p>films.remove(‘柯南’)</p><p>print(films)</p><p>3) 列表.pop()</p><p>列表.pop()  -   取出列表中最后一个元素,返回被取出的元素</p><p>列表.pop(下标)    -   取出列表中指定下标对应的元素</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 练习</span>scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> scores<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> temp<span class="token punctuation">:</span>         <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>                 scores<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> scores<span class="token punctuation">:</span>         <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span></code></pre><h5 id="3改-修改元素的值"><a href="#3改-修改元素的值" class="headerlink" title="3改    -    修改元素的值"></a>3改    -    修改元素的值</h5><p> 列表[下标] = 值    -   将列表中指定下标对应的元素修改成指定的值</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 将scores中所有小于60的分数换成不及格</span>scores <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>scores<span class="token punctuation">)</span><span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> scores<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">60</span><span class="token punctuation">:</span>                scores<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'不及格'</span><span class="token keyword">print</span><span class="token punctuation">(</span>scores<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>变量与运算符</title>
      <link href="/2019/11/05/bian-liang-yu-yun-suan-fu/"/>
      <url>/2019/11/05/bian-liang-yu-yun-suan-fu/</url>
      
        <content type="html"><![CDATA[<p>#变量与运算符</p><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a>1.变量</h3><p>#####1.什么是变量：变量是用来申请空间保存数据的</p><p>1) 声明变量的语法</p><p>声明完变量后，使用变量就是在使用变量里存储的值<br>变量名    —    值</p><p>2）说明<br>重命名  - 程序员自己命名的<br>要求：是标识符；不能是关键字<br>规范：见名知义；满足PEP8命名规范(所有的字母都小写,多个单词用下划线隔开; 不能使用系统提供的函数名、类名、库名来给变量命名    </p><p>=   —&gt;   赋值符号，将右边的数据赋值给左边的变量（动词）值      </p><p>值  —&gt;   任何有结果的表达式，例如：数据、已经声明过的变量、运算表达式等                </p><p>3）.变量的值</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> <span class="token number">89</span>b2 <span class="token operator">=</span> <span class="token number">0x1101</span>b3 <span class="token operator">=</span> <span class="token string">'你好'</span>b4 <span class="token operator">=</span> <span class="token boolean">True</span>b5 <span class="token operator">=</span> ageb6 <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> age</code></pre><p>#####2.变量的使用</p><p>使用变量就是使用变量中的值；变量中的值可以修改</p><h5 id="3-同时声明多个变量"><a href="#3-同时声明多个变量" class="headerlink" title="3.同时声明多个变量"></a>3.同时声明多个变量</h5><p>1)同时声明多个变量赋相同的值 </p><p>变量名1 = 变量名2 = 变量名3 =  …  = 值 </p><p>2)同时声明多个变量赋不同的值 </p><p>变量名1，变量名2，变量名3，….  = 值1， 值2， 值3</p><p>#####4.python声明变量原理</p><p>开辟空间存储数据(注册这个数据需要多大的内存就可以开辟多少空间)，然后在将变量的和这个数据对应的内存空间关联到一起，在对变量重新赋值时，则是开辟一个新的空间存储数据，在与之前的变量关联的同时销毁之前的数据空间</p><pre class=" language-markdown"><code class="language-markdown">变量三要素：a = 10值  - 给变量赋值的数据（10）   使用变量类型  - 给变量赋值的数据的类型（int）  type(变量)地址  - 给变量赋值的数据在内存中的地址，也是变量中真正存储的东西（0xff）id（量）</code></pre><p>注意：python中一个变量给另外一个变量赋值是将原来的变量中数据地址赋给另外一个变量；赋值完成后，数据还是只有一个</p><h3 id="2-运算符"><a href="#2-运算符" class="headerlink" title="2.运算符"></a>2.运算符</h3><p>python支持的运算符：数学运算符、比较运算符、逻辑运算符、赋值运算、位运算</p><h5 id="1-数学运算符：-、-、、-、-、-、"><a href="#1-数学运算符：-、-、、-、-、-、" class="headerlink" title="1.数学运算符：+、-、、/、%、//、*"></a>1.数学运算符：+、-、<em>、/、%、//、*</em></h5><p>1）+、-、*、/ 和小学数学的加、减、乘、除的功能一模一样</p><p><code>print(5 / 2)</code></p><p>2）%    —     求余数（取余/取模）</p><p><code>print(5 % 2)</code><br>应用1：判断整数的奇偶性  -  判断这个数对2取余的结果是否为0</p><p><code>print(23 % 2)</code><br>应用2：是否整除  -  判断余数是否为0<br>应用3：取低位数，列如，获取一个整数个位数  -  数字%10</p><pre class=" language-markdown"><code class="language-markdown">num = 123print(num % 10)    #3print(num % 100)   #23</code></pre><p>3)  //    -     整除；商只取整数部分<br>注意：负数整除除不尽的时候向下取整<br><code>print(5 // 2)   #  2</code></p><p>应用：取高位</p><p><code>print(num // 100)  # 1</code></p><p>4)  **    -    幂运算:     x ** y     –     求x的y次方</p><p><code>print(2 ** 3)</code></p><p><code>print(16 ** (1/2))</code></p><p>#####2.比较运算符：&gt;、&lt;、==、!=、&gt;=、&lt;=</p><p>注意：所有的比较运算符的运算结果都是布尔值</p><p> 1）&gt;、&lt;、&gt;=、&lt;=和数学中的一样</p><p><code>print(10 &gt; 20)  #False</code></p><p><code>print(10 &lt; 20)  #True</code></p><p>2) ==    –    判断两个值是否相等,  !=     -    判断两个值是否不相等</p><p><code>print(10 == 10)  #True</code></p><p><code>print(10 != 10)  #False</code> </p><p>3)python可以想数学一样用比较运算符连写的方式表示范围(C/Java/JS等不可以)</p><pre class=" language-python"><code class="language-python">age <span class="token operator">=</span> <span class="token number">30</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">18</span> <span class="token operator">&lt;</span> age <span class="token operator">&lt;</span> <span class="token number">28</span><span class="token punctuation">)</span></code></pre><p>#####3.逻辑运算符：and(与)、or(或)、not(非)</p><p>逻辑运算符的运算对象和结果一般都是布尔值</p><p>1）and</p><p>运算规则：两个都是True结果才是True，只要有一个是False结果就是False</p><pre class=" language-python"><code class="language-python"><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">True</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">False</span> <span class="token operator">and</span> <span class="token boolean">True</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">True</span> <span class="token operator">and</span> <span class="token boolean">False</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">False</span><span class="token boolean">False</span> <span class="token operator">and</span> <span class="token boolean">False</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">False</span></code></pre><p>使用场景：需要多个条件同时满足的时候，就用and：相当于生活中的并且</p><pre class=" language-python"><code class="language-python">GPA <span class="token operator">=</span> <span class="token number">4.5</span>score <span class="token operator">=</span> <span class="token number">90</span>获取奖学金的条件：绩点不低于<span class="token number">4</span>并且评分不低于<span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否能获取奖学金'</span><span class="token punctuation">,</span> GPA <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">and</span> score <span class="token operator">></span><span class="token number">95</span><span class="token punctuation">)</span>练习：判断一个数是否能够同时被<span class="token number">3</span>和<span class="token number">7</span>整除num <span class="token operator">=</span> <span class="token number">21</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否能够同时被3和7整除：'</span><span class="token punctuation">,</span> num <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> num <span class="token operator">%</span> <span class="token number">7</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>2) or</p><p>运算规则：两个都是False结果才是False，只要有一个是True结果就是True</p><pre class=" language-python"><code class="language-python"><span class="token boolean">True</span> <span class="token operator">or</span> <span class="token boolean">True</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">True</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">True</span> <span class="token operator">or</span> <span class="token boolean">False</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">True</span><span class="token boolean">False</span> <span class="token operator">or</span> <span class="token boolean">False</span>  <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">False</span></code></pre><p>使用场景：需要多个条件中有一个条件满足就行，就使用or；相当于生活中的或者</p><pre class=" language-python"><code class="language-python">GPA <span class="token operator">=</span> <span class="token number">4.5</span>score <span class="token operator">=</span> <span class="token number">98</span>获取奖学金的条件：绩点不低于<span class="token number">4</span>或评分高于<span class="token number">95</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'是否能获取奖学金'</span><span class="token punctuation">,</span> GPA <span class="token operator">>=</span> <span class="token number">4</span> <span class="token operator">or</span> score <span class="token operator">></span><span class="token number">95</span><span class="token punctuation">)</span></code></pre><p>3)not</p><p>运算规则：True变False, False变True</p><pre class=" language-python"><code class="language-python"><span class="token operator">not</span> <span class="token boolean">True</span>  <span class="token operator">-</span><span class="token operator">></span>  <span class="token boolean">False</span><span class="token operator">not</span> <span class="token boolean">False</span>  <span class="token operator">-</span><span class="token operator">></span>  <span class="token boolean">True</span></code></pre><p>使用场景：对某一个条件进行否定</p><pre class=" language-python"><code class="language-python">num <span class="token operator">=</span> <span class="token number">42</span>一个数不能同时被<span class="token number">3</span>和<span class="token number">7</span>整除的条件<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'不能同时被3和7整除：'</span><span class="token punctuation">,</span><span class="token operator">not</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">21</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><p> 4)短路操作</p><p>and的短路操作：条件1 and 条件2  -&gt;and前面的条件如果结果是False，那么后面的条件语句不会执行，结果直接是False</p><p>or的短路操作：条件1 or 条件2  -&gt; or前面的条件如果结果是True，那么后面的条件语句不会执行，结果直接是True</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'函数被执行了'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span><span class="token boolean">False</span> <span class="token operator">and</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token boolean">True</span> <span class="token operator">or</span> func1<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h5 id="4-赋值运算符：-、-、-、-、-、-、-、"><a href="#4-赋值运算符：-、-、-、-、-、-、-、" class="headerlink" title="4.赋值运算符：=、+=、-=、=、/=、%=、//=、*="></a>4.赋值运算符：=、+=、-=、<em>=、/=、%=、//=、*</em>=</h5><p>所有的赋值运算符的左边必须是变量；组合赋值运算符的左边除了是变量，这个变量还必须是已经声明过的</p><p> 1）变量 = 数据  -&gt; 将右边的数据赋值给左边的变量</p><pre class=" language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">10</span>b <span class="token operator">=</span> <span class="token number">10</span> <span class="token operator">*</span> <span class="token number">2</span>c <span class="token operator">=</span> ad <span class="token operator">=</span> a <span class="token operator">+</span> b</code></pre><p> 2) 组合的赋值运算符</p><p>变量 += 值  -&gt;  变量 = 变量 + 值</p><pre class=" language-python"><code class="language-python">aa <span class="token operator">+=</span> <span class="token number">10</span>bb <span class="token operator">=</span> <span class="token number">100</span>bb <span class="token operator">*=</span><span class="token number">4</span><span class="token operator">/</span><span class="token number">2</span>  除法运算后结果为浮点数</code></pre><h5 id="5-运算顺序"><a href="#5-运算顺序" class="headerlink" title="5.运算顺序"></a>5.运算顺序</h5><p>数学运算符 &gt; 比较运算符 &gt; 逻辑运算符 &gt; 赋值运算符</p><p>数学运算符的优先级和数学一样：** &gt; * , / , // , % &gt; + , -</p><p>如果有括号，先算括号里面的</p><p>###3.位运算符</p><p>所有的位运算都是针对数字的补码进行操作的；特点是：快（效率高）</p><p> 位运算：&amp;(与),|(或),~(取反)，^(异或)，&lt;&lt;(左移），&gt;&gt;(右移)</p><p> 1.&amp;</p><p>运算规则：补码每一位上的数都是1结果就是1，如果有一个0结果就是0</p><p><code>1110 &amp; 0111 = 0110</code></p><p>应用：高效判断数字的奇偶性  - 让数字和1进行按位与运算，判断结果是0(偶数)还是1(奇数)</p><pre class=" language-markdown"><code class="language-markdown">a = 3 &amp; 2print(a)3的补码：000000112的补码：0000001000000011 &amp; 00000010 = 00000010 == 2b = -7 &amp; 3print(b)-7的补码：10000111（原） -> 11111001（补）3的补码：                   00000011-7 &amp; 3 = 00000001（补） == 1print(9 &amp; 1, 6 &amp; 1, 69 &amp; 1, 96 &amp;1)</code></pre><p>2.|</p><p>运算规则：每一位上的数如果都是0结果就是0，只要有1结果就是1</p><p><code>1110 | 0111  -&gt;  1111</code></p><pre class=" language-markdown"><code class="language-markdown">print(3 | 2)print(-7 | 3)-7:11111001（补）3:00000011 (补）11111011(补) -> 11111010(反)  -> 10000101 == -5</code></pre><p> 3.~</p><p>运算规则；将每一位上的0变成1,1边变成0</p><p><code>~1101 -&gt; 0010</code></p><p>4.^</p><p>运算规则：每一位相同上的数相同为0，不同为1</p><p><code>11011 ^ 10010 -&gt;01001</code></p><p> 5.&lt;&lt;</p><p>运算规则：&lt;&lt; n  -&gt;指定的编码整体想左移动N位；计算：数字 * 2 ** N</p><p><code>print(2 &lt;&lt; 1)  # 2 * 2**1 == 4</code></p><p><code>print(3 &lt;&lt; 2)  # 3 * 2**2 == 12</code></p><p><code>print(-4 &lt;&lt; 1)  # -8</code></p><p> 6.&gt;&gt;</p><p>运算规则：&gt;&gt;n  -&gt;指定的编码整体想有右移动N位 ； 计算：数字 // 2 ** N</p><p><code>print(4 &gt;&gt; 1)  # 2</code></p><p><code>print(9 &gt;&gt; 2)  # 2</code></p><p><code>print(-8 &gt;&gt; 2)  # -2</code></p><p><code>print(-9 &gt;&gt; 1)  # -5</code></p><p><code>print(-9 // 2)  # -5</code></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python基础语法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pygame的基础属性</title>
      <link href="/2019/11/04/pygame/"/>
      <url>/2019/11/04/pygame/</url>
      
        <content type="html"><![CDATA[<p>###Pygame  </p><p>Pygame有很多的模块，不同的模块专注于不同的功能：  </p><table><thead><tr><th>模块名</th><th>功能</th></tr></thead><tbody><tr><td>pygame.cdrom</td><td>访问光驱</td></tr><tr><td>pygame.cursors</td><td>加载光标</td></tr><tr><td>pygame.display</td><td>访问显示设备</td></tr><tr><td>pygame.draw</td><td>绘制形状、线和点</td></tr><tr><td>pygame.event</td><td>管理事件</td></tr><tr><td>pygame.font</td><td>使用字体</td></tr><tr><td>pygame.image</td><td>加载和存储图片</td></tr><tr><td>pygame.joystick</td><td>使用游戏手柄或者 类似的东西</td></tr><tr><td>pygame.key</td><td>读取键盘按键</td></tr><tr><td>pygame.mixer</td><td>声音</td></tr><tr><td>pygame.mouse</td><td>鼠标</td></tr><tr><td>pygame.movie</td><td>播放视频</td></tr><tr><td>pygame.music</td><td>播放音频</td></tr><tr><td>pygame.overlay</td><td>访问高级视频叠加</td></tr><tr><td>pygame.rect</td><td>管理矩形区域</td></tr><tr><td>pygame.sndarray</td><td>操作声音数据</td></tr><tr><td>pygame.sprite</td><td>操作移动图像</td></tr><tr><td>pygame.surface</td><td>管理图像和屏幕</td></tr><tr><td>pygame.surfarray</td><td>管理点阵图像数据</td></tr><tr><td>pygame.time</td><td>管理时间和帧信息</td></tr><tr><td>pygame.transform</td><td>缩放和移动图像</td></tr></tbody></table><p>####disolay模块<br>下面主要介绍一下display模块的一些常用方法：<br>#####1.set_model 生成windows窗口</p><pre><code>pygame.display.set_model(resolution, flags, depth)  </code></pre><p>resolution：可以控制生成的window的大小。传的值：(100,200)这样的<br>flags：控制你想要怎样的显示屏，可以赋一下几个全局常量。（这些常量在pygame.locals模块中）    </p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>FULLSCREEN</td><td>控制全屏,0或者1来控制</td></tr><tr><td>HWSURFACE</td><td>控制是否进行硬件加速</td></tr><tr><td>RESIZABLE</td><td>控制窗口是否可以调节大小</td></tr><tr><td>NOFRAME</td><td>创建一个没有边框的窗口</td></tr></tbody></table><p>depth：不推荐设置    </p><p>#####2.get_caption()获得窗口的标题  </p><pre><code>pygame.display.get_caption()  </code></pre><p>#####3.set_caption(title)设置窗口的标题  </p><pre><code>pygame.display.set_caption(title)  </code></pre><p>​<br>####事件  </p><table><thead><tr><th>事件</th><th>产生途径</th><th>参数</th></tr></thead><tbody><tr><td>QUIT</td><td>用户按下关闭按钮</td><td>none</td></tr><tr><td>ATIVEEVENT</td><td>Pygame被激活或者隐藏</td><td>gain, state</td></tr><tr><td>KEYDOWN</td><td>键盘被按下</td><td>unicode, key, mod</td></tr><tr><td>KEYUP</td><td>键盘被放开</td><td>key, mod</td></tr><tr><td>MOUSEMOTION</td><td>鼠标移动</td><td>pos, rel, buttons</td></tr><tr><td>MOUSEBUTTONDOWN</td><td>鼠标按下</td><td>pos, button</td></tr><tr><td>MOUSEBUTTONUP</td><td>鼠标放开</td><td>pos, button</td></tr><tr><td>USEREVENT</td><td>触发了一个用户事件</td><td>code</td></tr></tbody></table><p>​    </p><p>​    </p><p>​        </p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pygame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>itchat基础教程</title>
      <link href="/2019/11/03/itchat-shi-yong-jiao-cheng/"/>
      <url>/2019/11/03/itchat-shi-yong-jiao-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="itchat使用教程"><a href="#itchat使用教程" class="headerlink" title="itchat使用教程"></a>itchat使用教程</h1><p>itchat是一个开源的微信个人号接口，使用python调用微信从未如此简单。使用不到三十行的代码，你就可以完成一个能够处理所有信息的微信机器人。</p><p>首先，在终端安装一下itchat:</p><pre class=" language-python"><code class="language-python">pip install itchat</code></pre><p>##1.登录</p><ol><li>login()  - 每次运行程序都需要扫二维码</li><li>login(hotReload==True)  - 下次登录不用再扫二维码</li><li>auto_login(loginCallback=登录成功回调函数, exitCallback=退出登录回调函数)</li></ol><h2 id="2-退出登录"><a href="#2-退出登录" class="headerlink" title="2.退出登录"></a>2.退出登录</h2><ol><li>logout()    - 强制退出登录</li></ol><h2 id="3-获取好友信息"><a href="#3-获取好友信息" class="headerlink" title="3.获取好友信息"></a>3.获取好友信息</h2><ol><li>get_friends(update=True)</li></ol><h2 id="4-发送消息"><a href="#4-发送消息" class="headerlink" title="4.发送消息"></a>4.发送消息</h2><p>send(msg=消息内容, toUserName=用户名)</p><p>1) msg的值会因为消息类型不同而不同：</p><p>文本消息 - 引号中直接写要发送的文字内容</p><p>发送文件 - @fil@文件路径</p><p>发送图片 - @img@图片路径</p><p>发送视频 - @vid@视频路径</p><p>2)toUserName:  发送对象，如果不填就发送给自己</p><h2 id="5-接收消息"><a href="#5-接收消息" class="headerlink" title="5.接收消息"></a>5.接收消息</h2><p>想要自动接收消息，需要先对不同类型的消息进行注册，如果没有注册，对应类型的消息将不会被接收.</p><p>注册的方式如下:</p><pre class=" language-python"><code class="language-python">@itchat<span class="token punctuation">.</span>msg_register<span class="token punctuation">(</span>消息类型<span class="token punctuation">,</span>isFriendChat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> isGroupChat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>isMpChat<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> 函数名<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#接收到对应的消息会自动执行的代码段</span>    <span class="token comment" spellcheck="true">#msg.download(msg['FileName'])   #这个同样是下载文件的方式</span>    <span class="token comment" spellcheck="true">#msg['Text'](msg['FileName'])      #下载文件</span></code></pre><p>1）消息类型:</p><table><thead><tr><th>参数</th><th>类型</th><th>Text键值</th></tr></thead><tbody><tr><td>TEXT</td><td>文本</td><td>文本内容(文字消息)</td></tr><tr><td>MAP</td><td>地图</td><td>位置文本(位置分享)</td></tr><tr><td>CARD</td><td>名片</td><td>推荐人字典(推荐人的名片)</td></tr><tr><td>SHARING</td><td>分享</td><td>分享名称(分享的音乐或者文章等)</td></tr><tr><td>RECORDING</td><td>语音</td><td>下载方法</td></tr><tr><td>ATTACHMENT</td><td>附件</td><td>下载方法</td></tr><tr><td>VIDEO</td><td>小视频</td><td>下载方法</td></tr><tr><td>FRIENDS</td><td>好友邀请</td><td>添加好友所需参数</td></tr><tr><td>SYSTEM</td><td>系统消息</td><td>更新内容的用户或群聊的UserName组成的列表</td></tr><tr><td>NOTE</td><td>通知</td><td>通知文本(消息撤回等)</td></tr><tr><td>PICTURE</td><td>图片/表情</td><td>下载方法</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> itchat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIL的基础教程</title>
      <link href="/2019/11/02/pil-de-shi-yong/"/>
      <url>/2019/11/02/pil-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/lyrichu/p/9124504.html" target="_blank" rel="noopener">PIL的使用</a></p><pre><code>from PIL import Image, ImageFilter, ImageDraw</code></pre><p>#####1.加载图片  </p><pre><code>图片对象 = Image.open(图片地址)</code></pre><h5 id="2-使用滤镜"><a href="#2-使用滤镜" class="headerlink" title="2.使用滤镜"></a>2.使用滤镜</h5><pre class=" language-python"><code class="language-python">image1<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>滤镜效果<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""滤镜效果:ImageFilter.EMBOSS   -  浮雕效果ImageFilter.FIND_EDGES - 泼墨效果ImageFilter.SHARPEN  -  锐化滤波ImageFilter.SMOOTH  -  平滑滤波ImageFilter.EDGE_ENHANCE_MORE - 边界增强滤波（程度更深）ImageFilter.EDGE_ENHANCE - 边界增强滤波ImageFilter.DETAIL - 细节滤波ImageFilter.CONTOUR - 轮廓滤波(铅笔画)ImageFilter.BLUR - 模糊滤波"""</span></code></pre><h5 id="3-图片的剪切"><a href="#3-图片的剪切" class="headerlink" title="3.图片的剪切"></a>3.图片的剪切</h5><pre class=" language-python"><code class="language-python">图片对象<span class="token punctuation">.</span>crop<span class="token punctuation">(</span>范围<span class="token punctuation">)</span>范围<span class="token punctuation">:</span> <span class="token punctuation">(</span>起点x坐标<span class="token punctuation">,</span>起点y坐标<span class="token punctuation">,</span> 终点x坐标，终点y坐标<span class="token punctuation">)</span></code></pre><h5 id="4-粘贴"><a href="#4-粘贴" class="headerlink" title="4.粘贴"></a>4.粘贴</h5><pre><code>图片对象1.paste(图片对象2,(x坐标，y坐标))</code></pre><h5 id="5-镜像"><a href="#5-镜像" class="headerlink" title="5.镜像"></a>5.镜像</h5><pre class=" language-python"><code class="language-python">图片对象<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>对称方式<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Image.FLIP_LEFT_RIGHT - 左右镜像</span><span class="token comment" spellcheck="true"># Image.FLIP_TOP_BOTTOM - 上下镜像</span></code></pre><h5 id="6-缩放"><a href="#6-缩放" class="headerlink" title="6.缩放"></a>6.缩放</h5><pre><code>图片对象.thumbnail((宽度, 高度))  - 自动按比例缩放</code></pre><h5 id="7-创建空白图片"><a href="#7-创建空白图片" class="headerlink" title="7.创建空白图片"></a>7.创建空白图片</h5><pre class=" language-python"><code class="language-python">Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span>模式<span class="token punctuation">,</span>图片大小<span class="token punctuation">,</span> 背景颜色<span class="token punctuation">)</span>empty <span class="token operator">=</span> Image<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token string">'RGB'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h5 id="8-文字水印"><a href="#8-文字水印" class="headerlink" title="8.文字水印"></a>8.文字水印</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建一个空的图片</span>Image<span class="token punctuation">,</span>new<span class="token punctuation">(</span>模式<span class="token punctuation">,</span>图片大小<span class="token punctuation">,</span>背景颜色<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.创建font对象</span>ImageFont<span class="token punctuation">.</span>truetype<span class="token punctuation">(</span>字体文件<span class="token punctuation">,</span>字体大小<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.创建draw对象</span>ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>图片对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4.画文字</span>draw<span class="token punctuation">.</span>text<span class="token punctuation">(</span>坐标<span class="token punctuation">,</span>文字<span class="token punctuation">,</span>字体对象<span class="token punctuation">,</span>文字颜色<span class="token punctuation">)</span></code></pre><h5 id="9-颜色块"><a href="#9-颜色块" class="headerlink" title="9.颜色块"></a>9.颜色块</h5><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1.创建一个图片对象(可以是空图片，也可以是已经存在的图片)</span><span class="token comment" spellcheck="true"># 2.创建Draw对象</span>ImageDraw<span class="token punctuation">.</span>Draw<span class="token punctuation">(</span>图片对象<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3.设置点颜色</span>Draw对象<span class="token punctuation">.</span>point<span class="token punctuation">(</span>坐标<span class="token punctuation">,</span>颜色<span class="token punctuation">)</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> PIL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>turtel基础教程</title>
      <link href="/2019/11/01/turtle-de-ji-ben-shi-yong/"/>
      <url>/2019/11/01/turtle-de-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h2 id="turtel的使用"><a href="#turtel的使用" class="headerlink" title="turtel的使用"></a>turtel的使用</h2><h5 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1. 基本操作"></a>1. 基本操作</h5><p>1.创建画布</p><pre class=" language-python"><code class="language-python">turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span>宽度<span class="token punctuation">,</span>高度<span class="token punctuation">)</span></code></pre><p>2.设置笔</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1)设置笔的颜色</span>turtle<span class="token punctuation">.</span>pencolor<span class="token punctuation">(</span>颜色<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 2)设置线宽</span>turtle<span class="token punctuation">.</span>width<span class="token punctuation">(</span>线宽<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3)设置速度</span>turtle<span class="token punctuation">.</span>speed<span class="token punctuation">(</span>速度值<span class="token punctuation">)</span>   <span class="token operator">-</span> 速度值是<span class="token number">1</span><span class="token operator">-</span><span class="token number">10</span> 和 <span class="token number">0</span></code></pre><p>3.控制笔移动</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 1）向前走</span>turtle<span class="token punctuation">.</span>forward<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token operator">|</span>turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2) 向后走</span>turtle<span class="token punctuation">.</span>back<span class="token punctuation">(</span>距离<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 3) 移动到指定位置</span>turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span>x坐标<span class="token punctuation">,</span> y坐标<span class="token punctuation">)</span><span class="token operator">/</span> turtle<span class="token punctuation">.</span>setx<span class="token punctuation">(</span>x坐标<span class="token punctuation">)</span> <span class="token operator">/</span> turtle<span class="token punctuation">.</span>sety<span class="token punctuation">(</span>y坐标<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 4) 回到开始位置</span>turtle<span class="token punctuation">.</span>home<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>4.控制笔的方向 </p><pre class=" language-Python"><code class="language-Python"># 1)向左转turtle.left(角度)# 2)向右转turtle.right(角度)</code></pre><p>5.抬起笔和放下笔</p><pre class=" language-Python"><code class="language-Python"># 1）抬起笔turtle.up()# 2)放下笔turtle.down()</code></pre><p>6.程序一直运行<br>turtle.mainloop()</p><p>#####2. 画圆</p><ol><li>画圆环<pre class=" language-Python"><code class="language-Python">#1) 画一个完整的圆circle(半径)#2) 画圆环的一部分turtle.circle(半径, 角度)</code></pre></li><li>画实心圆<pre class=" language-Python"><code class="language-Python">turtle.dot(直径)</code></pre></li></ol><p>#####3.填充</p><pre class=" language-Python"><code class="language-Python"># 设置填充颜色turtle.fillcolor(颜色)# 开始填充turtle.begin_fill()# 结束填充turtle.end_fill()</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> python模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> turtel </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
